{"ast":null,"code":"var _jsxFileName = \"E:\\\\elnino-trial-day\\\\frontendreact\\\\src\\\\pages\\\\TaskPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ReactComponent as ArrowLeft } from \"@svgr/webpack?-svgo,+titleProp,+ref!../assets/arrow-left.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskPage = _ref => {\n  _s();\n  let {\n    match,\n    history\n  } = _ref;\n  let taskId = match.params.id;\n  let [task, setTask] = useState(null);\n  const [checked, setChecked] = React.useState(false);\n  useEffect(() => {\n    getTask();\n  }, [taskId, checked]);\n  let getTask = async () => {\n    if (taskId === 'new') return;\n    let response = await fetch(`/api/tasks/${taskId}/`);\n    let data = await response.json();\n    setTask(data);\n  };\n  let createTask = async () => {\n    console.log('creating task');\n    fetch(`/api/tasks/${taskId}`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n  };\n  let updateTask = async () => {\n    fetch(`/api/tasks/${taskId}/`, {\n      method: \"PUT\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n  };\n  let deleteTask = async () => {\n    fetch(`/api/tasks/${taskId}/`, {\n      method: 'DELETE',\n      'headers': {\n        'Content-Type': 'application/json'\n      }\n    });\n    history.push('/');\n  };\n  let handleSubmit = () => {\n    console.log(task);\n    if (taskId !== 'new' && task.description === '') {\n      deleteTask();\n    } else if (taskId !== 'new') {\n      updateTask();\n    } else if (task !== null && task !== void 0 && task.description && taskId === 'new' && task.description !== null) {\n      createTask();\n    }\n    history.push('/');\n  };\n  let handleChange = value => {\n    setTask(task => ({\n      ...task,\n      'description': value\n    }));\n  };\n  let changeTitle = value => {\n    setTask(task => ({\n      ...task,\n      'title': value\n    }));\n  };\n  let setDeadline = value => {\n    setTask(task => ({\n      ...task,\n      'deadline': value\n    }));\n  };\n  let handleCheck = () => {\n    setTask(task => ({\n      ...task,\n      'completed': !task.completed\n    }));\n  };\n  let getDeadline = task => {\n    return new Date(task === null || task === void 0 ? void 0 : task.deadline).toLocaleDateString();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(ArrowLeft, {\n          onClick: handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), taskId !== 'new' ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteTask,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Title:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"checkbox task\",\n      type: \"checkbox\",\n      checked: task === null || task === void 0 ? void 0 : task.completed,\n      onChange: handleCheck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"textarea title\",\n      onChange: e => {\n        changeTitle(e.target.value);\n      },\n      value: task === null || task === void 0 ? void 0 : task.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Deadline: \", /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"textarea title\",\n        onChange: e => {\n          setDeadline(e.target.value);\n        },\n        value: task === null || task === void 0 ? void 0 : task.deadline\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Description:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"textarea body\",\n        onChange: e => {\n          handleChange(e.target.value);\n        },\n        value: task === null || task === void 0 ? void 0 : task.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskPage, \"3purR26+3zbupAQDO1f82tKBc6E=\");\n_c = TaskPage;\nexport default TaskPage;\nvar _c;\n$RefreshReg$(_c, \"TaskPage\");","map":{"version":3,"names":["React","useState","useEffect","TaskPage","match","history","taskId","params","id","task","setTask","checked","setChecked","getTask","response","fetch","data","json","createTask","console","log","method","headers","body","JSON","stringify","updateTask","deleteTask","push","handleSubmit","description","handleChange","value","changeTitle","setDeadline","handleCheck","completed","getDeadline","Date","deadline","toLocaleDateString","e","target","title"],"sources":["E:/elnino-trial-day/frontendreact/src/pages/TaskPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { ReactComponent as ArrowLeft } from '../assets/arrow-left.svg'\r\n\r\nconst TaskPage = ({ match, history }) => {\r\n\r\n    let taskId = match.params.id\r\n    let [task, setTask] = useState(null)\r\n    const [checked, setChecked] = React.useState(false);\r\n\r\n    useEffect(() => {\r\n        getTask()\r\n    }, [taskId, checked])\r\n\r\n    let getTask = async () => {\r\n        if (taskId === 'new') return\r\n        let response = await fetch(`/api/tasks/${taskId}/`)\r\n        let data = await response.json()\r\n        setTask(data)\r\n    }\r\n\r\n    let createTask = async () => {\r\n        console.log('creating task')\r\n        fetch(`/api/tasks/${taskId}`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(task)\r\n        })\r\n    }\r\n\r\n\r\n    let updateTask = async () => {\r\n        fetch(`/api/tasks/${taskId}/`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(task)\r\n        })\r\n    }\r\n\r\n    let deleteTask = async () => {\r\n        fetch(`/api/tasks/${taskId}/`, {\r\n            method: 'DELETE',\r\n            'headers': {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        history.push('/')\r\n    }\r\n\r\n    let handleSubmit = () => {\r\n        console.log(task)\r\n        if (taskId !== 'new' && task.description === '') {\r\n            deleteTask()\r\n        } else if (taskId !== 'new') {\r\n            updateTask()\r\n        } else if (task?.description && taskId === 'new' && task.description !== null) {\r\n            createTask()\r\n        }\r\n        history.push('/')\r\n    }\r\n\r\n    let handleChange = (value) => {\r\n        setTask(task => ({ ...task, 'description': value }))\r\n    }\r\n    \r\n\r\n    let changeTitle = (value) => {\r\n        setTask(task => ({ ...task, 'title': value }))\r\n    }\r\n\r\n    let setDeadline = (value) => {\r\n        setTask(task => ({ ...task, 'deadline': value }))\r\n    }\r\n\r\n    let handleCheck = () => {\r\n        \r\n        setTask(task => ({...task, 'completed': !task.completed}))\r\n    }\r\n\r\n    let getDeadline = (task) => {\r\n        return new Date(task?.deadline).toLocaleDateString()\r\n    }\r\n    \r\n    return (\r\n        <div className=\"note\" >\r\n            <div className=\"note-header\">\r\n                <h3>\r\n                    <ArrowLeft onClick={handleSubmit} />\r\n                </h3>\r\n                {taskId !== 'new' ? (\r\n                    <button onClick={deleteTask}>Delete</button>\r\n                ) : (\r\n                    <button onClick={handleSubmit}>Done</button>\r\n                )}\r\n                </div>\r\n                \r\n            <p>Title:</p>\r\n                <input className='checkbox task'\r\n                type=\"checkbox\"\r\n                checked={task?.completed}\r\n                onChange={handleCheck}\r\n                /> \r\n            \r\n             <textarea className='textarea title' onChange={(e) => { changeTitle(e.target.value) }} value={task?.title}></textarea>\r\n            <p>\r\n                Deadline: <textarea className='textarea title' onChange={(e) => { setDeadline(e.target.value) }} value={task?.deadline}></textarea>\r\n                \r\n            </p>\r\n            <p>\r\n            Description:\r\n            </p>\r\n            <label>\r\n                \r\n                \r\n                <textarea className='textarea body' onChange={(e) => { handleChange(e.target.value) }} value={task?.description}></textarea>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskPage\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}